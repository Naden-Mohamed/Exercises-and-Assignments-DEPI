# -*- coding: utf-8 -*-
"""Dash Assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mfr5OgMmRwFQIrfU39CMt_LeHrxP1HC1
"""

import pandas as pd
from jupyter_dash import JupyterDash
import dash
from dash import dcc, html, dash_table, Input, Output
import plotly.express as px
import numpy as np
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("test_2015.csv", parse_dates=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])

df.info()

df.head()

df.shape

df["VendorID"].value_counts()

df = df.dropna(subset=['pickup_longitude', 'pickup_latitude', 'fare_amount'])
df = df[df['fare_amount'] > 0]
df['trip_duration'] = (df['tpep_dropoff_datetime'] - df['tpep_pickup_datetime']).dt.total_seconds() / 60

app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("NYC Yellow Taxi Trip Dashboard"),

    html.Div([
        html.Label("Select Vendor:"),
        dcc.Dropdown(
            id='vendor-filter',
            options=[{'label': str(v), 'value': v} for v in df['VendorID'].unique()],
            value=df['VendorID'].unique().tolist(),
            multi=True
        ),

        html.Br(),

        html.Label("Select Fare Amount Range:"),
        dcc.RangeSlider(
            id='fare-slider',
            min=df['fare_amount'].min(),
            max=df['fare_amount'].max(),
            step=1,
            value=[5, 50],
            marks=None,
            tooltip={"placement": "bottom", "always_visible": True}
        ),

        html.Br(),

        html.Label("Select Pickup Date Range:"),
        dcc.DatePickerRange(
            id='date-picker',
            start_date=df['tpep_pickup_datetime'].min().date(),
            end_date=df['tpep_pickup_datetime'].max().date()
        ),
    ], style={'width': '25%', 'float': 'left', 'padding': '20px'}),

    html.Div([
        html.H3("Summary Metrics"),
        html.Div(id='summary-output'),

        dcc.Graph(id='pickup-map'),
        dcc.Graph(id='fare-hist'),
        dcc.Graph(id='duration-vs-distance'),

        html.H4("Data Table"),
        dash_table.DataTable(id='data-table', page_size=10, style_table={'overflowX': 'auto'}),
    ], style={'width': '70%', 'float': 'right', 'padding': '20px'})
])

@app.callback(
    [
        Output('pickup-map', 'figure'),
        Output('fare-hist', 'figure'),
        Output('duration-vs-distance', 'figure'),
        Output('data-table', 'data'),
        Output('data-table', 'columns'),
        Output('summary-output', 'children')
    ],
    [
        Input('vendor-filter', 'value'),
        Input('fare-slider', 'value'),
        Input('date-picker', 'start_date'),
        Input('date-picker', 'end_date')
    ]
)
def update_charts(vendors, fare_range, start_date, end_date):

    start_date = pd.to_datetime(start_date).date()
    end_date = pd.to_datetime(end_date).date()

    filtered = df[
        (df['VendorID'].isin(vendors)) &
        (df['fare_amount'] >= fare_range[0]) &
        (df['fare_amount'] <= fare_range[1]) &
        (df['tpep_pickup_datetime'].dt.date >= start_date) &
        (df['tpep_pickup_datetime'].dt.date <= end_date)
    ]

    total_trips = len(filtered)
    avg_fare = filtered['fare_amount'].mean()
    common_payment = filtered['payment_type'].mode()[0] if not filtered.empty else "N/A"
    top_pickup = filtered['pickup_latitude'].mode()[0] if not filtered.empty else "N/A"

    summary = html.Ul([
        html.Li(f"Total Trips: {total_trips}"),
        html.Li(f"Average Fare: ${avg_fare:.2f}"),
        html.Li(f"Most Common Payment Method: {common_payment}"),
        html.Li(f"Most Frequent Pickup Latitude: {top_pickup}")
    ])

    # Map
    map_fig = px.scatter_mapbox(
        filtered.sample(min(500, len(filtered))),
        lat="pickup_latitude",
        lon="pickup_longitude",
        color="VendorID",
        mapbox_style="open-street-map",
        zoom=10,
        height=400,
        title="Pickup Locations"
    )

    fare_fig = px.histogram(
        filtered,
        x="fare_amount",
        color="VendorID",
        nbins=30,
        title="Fare Amount Distribution"
    )

    scatter_fig = px.scatter(
        filtered,
        x="trip_distance",
        y="trip_duration",
        color="payment_type",
        title="Trip Duration vs Distance"
    )

    table_data = filtered.to_dict('records')
    table_columns = [{"name": i, "id": i} for i in filtered.columns]

    return map_fig, fare_fig, scatter_fig, table_data, table_columns, summary

if __name__ == '__main__':
  app.run(mode='inline', debug=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

X = df.drop(columns=['fare_amount'])
y = df['fare_amount']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Extract datetime features
X_train['pickup_hour'] = X_train['tpep_pickup_datetime'].dt.hour
X_train['pickup_dayofweek'] = X_train['tpep_pickup_datetime'].dt.dayofweek

X_test['pickup_hour'] = X_test['tpep_pickup_datetime'].dt.hour
X_test['pickup_dayofweek'] = X_test['tpep_pickup_datetime'].dt.dayofweek

X_train = X_train.drop(columns=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])
X_test = X_test.drop(columns=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
print(f"Linear Regression Score:{model.score(X_test, y_test)}")

print(X_train.select_dtypes(include='object').columns)

df.drop(columns=['store_and_fwd_flag'], inplace=True)

df.isnull().sum()

df.drop(columns=['RatecodeID','RateCodeID'], inplace=True)

df.isnull().sum()

